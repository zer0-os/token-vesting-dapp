/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MerkleTokenVestingInterface extends ethers.utils.Interface {
  functions: {
    "awards(address)": FunctionFragment;
    "claimAward(uint256,address,uint256,bool,bytes32[])": FunctionFragment;
    "getReleasableAmount(address)": FunctionFragment;
    "getVestedAmount(address)": FunctionFragment;
    "initialize(uint256,uint256,uint256,address,bytes32)": FunctionFragment;
    "isClaimed(uint256)": FunctionFragment;
    "merkleRoot()": FunctionFragment;
    "owner()": FunctionFragment;
    "release(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revoke(address)": FunctionFragment;
    "targetToken()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vestingCliff()": FunctionFragment;
    "vestingDuration()": FunctionFragment;
    "vestingStart()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "awards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimAward",
    values: [BigNumberish, string, BigNumberish, boolean, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getReleasableAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestedAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "release", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "revoke", values: [string]): string;
  encodeFunctionData(
    functionFragment: "targetToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingCliff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vestingStart",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "awards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimAward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReleasableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingCliff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingStart",
    data: BytesLike
  ): Result;

  events: {
    "Awarded(address,uint256,bool)": EventFragment;
    "Claimed(uint256,address,uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Released(address,uint256)": EventFragment;
    "Revoked(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Awarded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Released"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
}

export class MerkleTokenVesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MerkleTokenVestingInterface;

  functions: {
    awards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, boolean] & {
        amount: BigNumber;
        released: BigNumber;
        revocable: boolean;
        revoked: boolean;
      }
    >;

    claimAward(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      revocable: boolean,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getReleasableAmount(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVestedAmount(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      start: BigNumberish,
      cliff: BigNumberish,
      duration: BigNumberish,
      token: string,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isClaimed(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    merkleRoot(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    release(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revoke(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    targetToken(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vestingCliff(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestingDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    vestingStart(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  awards(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, boolean] & {
      amount: BigNumber;
      released: BigNumber;
      revocable: boolean;
      revoked: boolean;
    }
  >;

  claimAward(
    index: BigNumberish,
    account: string,
    amount: BigNumberish,
    revocable: boolean,
    merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getReleasableAmount(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVestedAmount(
    beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    start: BigNumberish,
    cliff: BigNumberish,
    duration: BigNumberish,
    token: string,
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isClaimed(index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  merkleRoot(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  release(
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revoke(
    beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  targetToken(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vestingCliff(overrides?: CallOverrides): Promise<BigNumber>;

  vestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

  vestingStart(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    awards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, boolean] & {
        amount: BigNumber;
        released: BigNumber;
        revocable: boolean;
        revoked: boolean;
      }
    >;

    claimAward(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      revocable: boolean,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    getReleasableAmount(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestedAmount(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      start: BigNumberish,
      cliff: BigNumberish,
      duration: BigNumberish,
      token: string,
      _merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isClaimed(index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    merkleRoot(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    release(beneficiary: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revoke(beneficiary: string, overrides?: CallOverrides): Promise<void>;

    targetToken(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vestingCliff(overrides?: CallOverrides): Promise<BigNumber>;

    vestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    vestingStart(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Awarded(
      beneficiary?: string | null,
      amount?: null,
      revocable?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { beneficiary: string; amount: BigNumber; revocable: boolean }
    >;

    Claimed(
      index?: null,
      account?: null,
      amount?: null,
      revocable?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, boolean],
      {
        index: BigNumber;
        account: string;
        amount: BigNumber;
        revocable: boolean;
      }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Released(
      beneficiary?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; amount: BigNumber }
    >;

    Revoked(
      beneficiary?: string | null,
      revokedAmount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; revokedAmount: BigNumber }
    >;
  };

  estimateGas: {
    awards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimAward(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      revocable: boolean,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getReleasableAmount(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVestedAmount(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      start: BigNumberish,
      cliff: BigNumberish,
      duration: BigNumberish,
      token: string,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isClaimed(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRoot(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    release(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revoke(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    targetToken(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vestingCliff(overrides?: CallOverrides): Promise<BigNumber>;

    vestingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    vestingStart(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    awards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimAward(
      index: BigNumberish,
      account: string,
      amount: BigNumberish,
      revocable: boolean,
      merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getReleasableAmount(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVestedAmount(
      beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      start: BigNumberish,
      cliff: BigNumberish,
      duration: BigNumberish,
      token: string,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isClaimed(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    release(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    targetToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vestingCliff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestingStart(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
